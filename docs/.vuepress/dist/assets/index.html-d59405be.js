import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as p,a as n,b as s,d as e,e as t}from"./app-f7051572.js";const o={},d=t(`<p><a name="terminology"></a></p><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h2><p><a name="rule-declaration"></a></p><h3 id="规则声明" tabindex="-1"><a class="header-anchor" href="#规则声明" aria-hidden="true">#</a> 规则声明</h3><p>我们把一个（或一组）选择器和一组属性称之为 “规则声明”。举个例子：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.listing</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="selectors"></a></p><h3 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h3><p>在规则声明中，“选择器” 负责选取 DOM 树中的元素，这些元素将被定义的属性所修饰。选择器可以匹配 HTML 元素，也可以匹配一个元素的类名、ID, 或者元素拥有的属性。以下是选择器的例子：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.my-element-class</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>

<span class="token selector">[aria-hidden]</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="properties"></a></p><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><p>最后，属性决定了规则声明里被选择的元素将得到何种样式。属性以键值对形式存在，一个规则声明可以包含一或多个属性定义。以下是属性定义的例子：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* some selector */</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #f1f1f1<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="css"></a></p><h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><p><a name="formatting"></a></p><h3 id="格式" tabindex="-1"><a class="header-anchor" href="#格式" aria-hidden="true">#</a> 格式</h3><ul><li>使用 2 个空格作为缩进。</li><li>类名建议使用破折号代替驼峰法。如果你使用 BEM，也可以使用下划线（参见下面的 <a href="#oocss-and-bem">OOCSS 和 BEM</a>）。</li><li>不要使用 ID 选择器。</li><li>在一个规则声明中应用了多个选择器时，每个选择器独占一行。</li><li>在规则声明的左大括号 <code>{</code> 前加上一个空格。</li><li>在属性的冒号 <code>:</code> 后面加上一个空格，前面不加空格。</li><li>规则声明的右大括号 <code>}</code> 独占一行。</li><li>规则声明之间用空行分隔开。</li></ul><p><strong>Bad</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.avatar</span><span class="token punctuation">{</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span>2px solid white<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token selector">.no, .nope, .not_good</span> <span class="token punctuation">{</span>
    // ...
<span class="token punctuation">}</span>
<span class="token selector">#lol-no</span> <span class="token punctuation">{</span>
  // ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.avatar</span> <span class="token punctuation">{</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 2px solid white<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.one,
.selector,
.per-line</span> <span class="token punctuation">{</span>
  // ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="comments"></a></p><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><ul><li>建议使用行注释 (在 Sass 中是 <code>//</code>) 代替块注释。</li><li>建议注释独占一行。避免行末注释。</li><li>给没有自注释的代码写上详细说明，比如： <ul><li>为什么用到了 z-index</li><li>兼容性处理或者针对特定浏览器的 hack</li></ul></li></ul><p><a name="oocss-and-bem"></a></p><h3 id="oocss-和-bem" tabindex="-1"><a class="header-anchor" href="#oocss-和-bem" aria-hidden="true">#</a> OOCSS 和 BEM</h3><p>出于以下原因，我们鼓励使用 OOCSS 和 BEM 的某种组合：</p><ul><li>可以帮助我们理清 CSS 和 HTML 之间清晰且严谨的关系。</li><li>可以帮助我们创建出可重用、易装配的组件。</li><li>可以减少嵌套，降低特定性。</li><li>可以帮助我们创建出可扩展的样式表。</li></ul><p><strong>OOCSS</strong>，也就是 “Object Oriented CSS（面向对象的CSS）”，是一种写 CSS 的方法，其思想就是鼓励你把样式表看作“对象”的集合：创建可重用性、可重复性的代码段让你可以在整个网站中多次使用。</p><p>参考资料：</p>`,32),r={href:"https://github.com/stubbornella/oocss/wiki",target:"_blank",rel:"noopener noreferrer"},u={href:"http://www.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[n("strong",null,"BEM"),s("，也就是 “Block-Element-Modifier”，是一种用于 HTML 和 CSS 类名的_命名约定_。BEM 最初是由 Yandex 提出的，要知道他们拥有巨大的代码库和可伸缩性，BEM 就是为此而生的，并且可以作为一套遵循 OOCSS 的参考指导规范。")],-1),k={href:"https://css-tricks.com/bem-101/",target:"_blank",rel:"noopener noreferrer"},m={href:"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/",target:"_blank",rel:"noopener noreferrer"},b=t(`<p><strong>示例</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listing-card listing-card--featured<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listing-card__title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Adorable 2BR in the sunny Mission<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listing-card__content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Vestibulum id ligula porta felis euismod semper.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.listing-card</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token selector">.listing-card--featured</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token selector">.listing-card__title</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token selector">.listing-card__content</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.listing-card</code> 是一个块（block），表示高层次的组件。</li><li><code>.listing-card__title</code> 是一个元素（element），它属于 <code>.listing-card</code> 的一部分，因此块是由元素组成的。</li><li><code>.listing-card--featured</code> 是一个修饰符（modifier），表示这个块与 <code>.listing-card</code> 有着不同的状态或者变化。</li></ul><p><a name="id-selectors"></a></p><h3 id="id-选择器" tabindex="-1"><a class="header-anchor" href="#id-选择器" aria-hidden="true">#</a> ID 选择器</h3>`,6),h={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity",target:"_blank",rel:"noopener noreferrer"},g={href:"http://csswizardry.com/2014/07/hacks-for-dealing-with-specificity/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p><a name="javascript-hooks"></a></p><h3 id="javascript-钩子" tabindex="-1"><a class="header-anchor" href="#javascript-钩子" aria-hidden="true">#</a> JavaScript 钩子</h3><p>避免在 CSS 和 JavaScript 中绑定相同的类。否则开发者在重构时通常会出现以下情况：轻则浪费时间在对照查找每个要改变的类，重则因为害怕破坏功能而不敢作出更改。</p><p>我们推荐在创建用于特定 JavaScript 的类名时，添加 <code>.js-</code> 前缀：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-primary js-request-to-book<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Request to Book<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a name="border"></a></p><h3 id="边框" tabindex="-1"><a class="header-anchor" href="#边框" aria-hidden="true">#</a> 边框</h3><p>在定义无边框样式时，使用 <code>0</code> 代替 <code>none</code>。</p><p><strong>Bad</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.foo</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Good</strong></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.foo</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="sass"></a></p><h2 id="sass" tabindex="-1"><a class="header-anchor" href="#sass" aria-hidden="true">#</a> Sass</h2><p><a name="syntax"></a></p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><ul><li>使用 <code>.scss</code> 的语法，不使用 <code>.sass</code> 原本的语法。</li><li>CSS 和 <code>@include</code> 声明按照以下逻辑排序（参见下文）</li></ul><p><a name="ordering-of-property-declarations"></a></p><h3 id="属性声明的排序" tabindex="-1"><a class="header-anchor" href="#属性声明的排序" aria-hidden="true">#</a> 属性声明的排序</h3><ol><li><p>属性声明</p><p>首先列出除去 <code>@include</code> 和嵌套选择器之外的所有属性声明。</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">.btn-green </span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>@include</code> 声明</p><p>紧随后面的是 <code>@include</code>，这样可以使得整个选择器的可读性更高。</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">.btn-green </span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token keyword">@include</span> <span class="token function">transition</span><span class="token punctuation">(</span>background 0.5s ease<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>嵌套选择器</p><p>_如果有必要_用到嵌套选择器，把它们放到最后，在规则声明和嵌套选择器之间要加上空白，相邻嵌套选择器之间也要加上空白。嵌套选择器中的内容也要遵循上述指引。</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">.btn </span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token keyword">@include</span> <span class="token function">transition</span><span class="token punctuation">(</span>background 0.5s ease<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token selector">.icon </span><span class="token punctuation">{</span>
    <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><a name="variables"></a></p><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h3><p>变量名应使用破折号（例如 <code>$my-variable</code>）代替 camelCased 和 snake_cased 风格。对于仅用在当前文件的变量，可以在变量名之前添加下划线前缀（例如 <code>$_my-variable</code>）。</p><p><a name="mixins"></a></p><h3 id="mixins" tabindex="-1"><a class="header-anchor" href="#mixins" aria-hidden="true">#</a> Mixins</h3><p>为了让代码遵循 DRY 原则（Don&#39;t Repeat Yourself）、增强清晰性或抽象化复杂性，应该使用 mixin，这与那些命名良好的函数的作用是异曲同工的。虽然 mixin 可以不接收参数，但要注意，假如你不压缩负载（比如通过 gzip），这样会导致最终的样式包含不必要的代码重复。</p><p><a name="extend-directive"></a></p><h3 id="扩展指令" tabindex="-1"><a class="header-anchor" href="#扩展指令" aria-hidden="true">#</a> 扩展指令</h3><p>应避免使用 <code>@extend</code> 指令，因为它并不直观，而且具有潜在风险，特别是用在嵌套选择器的时候。即便是在顶层占位符选择器使用扩展，如果选择器的顺序最终会改变，也可能会导致问题。（比如，如果它们存在于其他文件，而加载顺序发生了变化）。其实，使用 @extend 所获得的大部分优化效果，gzip 压缩已经帮助你做到了，因此你只需要通过 mixin 让样式表更符合 DRY 原则就足够了。</p><p><a name="nested-selectors"></a></p><h3 id="嵌套选择器" tabindex="-1"><a class="header-anchor" href="#嵌套选择器" aria-hidden="true">#</a> 嵌套选择器</h3><p><strong>请不要让嵌套选择器的深度超过 3 层！</strong></p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">.page-container </span><span class="token punctuation">{</span>
  <span class="token selector">.content </span><span class="token punctuation">{</span>
    <span class="token selector">.profile </span><span class="token punctuation">{</span>
      <span class="token comment">// STOP!</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当遇到以上情况的时候，你也许是这样写 CSS 的：</p><ul><li>与 HTML 强耦合的（也是脆弱的）<em>—或者—</em></li><li>过于具体（强大）<em>—或者—</em></li><li>没有重用</li></ul><p>再说一遍: <strong>永远不要嵌套 ID 选择器！</strong></p><p>如果你始终坚持要使用 ID 选择器（劝你三思），那也不应该嵌套它们。如果你正打算这么做，你需要先重新检查你的标签，或者指明原因。如果你想要写出风格良好的 HTML 和 CSS，你是<strong>不</strong>应该这样做的。</p>`,37);function x(_,S){const a=c("ExternalLinkIcon");return l(),p("div",null,[d,n("ul",null,[n("li",null,[s("Nicole Sullivan 的 "),n("a",r,[s("OOCSS wiki"),e(a)])]),n("li",null,[s("Smashing Magazine 的 "),n("a",u,[s("Introduction to OOCSS"),e(a)])])]),v,n("ul",null,[n("li",null,[s("CSS Trick 的 "),n("a",k,[s("BEM 101"),e(a)])]),n("li",null,[s("Harry Roberts 的 "),n("a",m,[s("introduction to BEM"),e(a)])])]),b,n("p",null,[s("在 CSS 中，虽然可以通过 ID 选择元素，但大家通常都会把这种方式列为反面教材。ID 选择器给你的规则声明带来了不必要的高"),n("a",h,[s("优先级"),e(a)]),s("，而且 ID 选择器是不可重用的。")]),n("p",null,[s("想要了解关于这个主题的更多内容，参见 "),n("a",g,[s("CSS Wizardry 的文章"),e(a)]),s("，文章中有关于如何处理优先级的内容。")]),f])}const M=i(o,[["render",x],["__file","index.html.vue"]]);export{M as default};
