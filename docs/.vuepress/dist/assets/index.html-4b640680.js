import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as t,e as o}from"./app-f7051572.js";const c={},i=o(`<h2 id="格式" tabindex="-1"><a class="header-anchor" href="#格式" aria-hidden="true">#</a> 格式</h2><p>日志的所有内容都使用 <code>ASCII</code> 字符，不要用中文或者 <code>emoji</code>，这样最大化兼容性，也便于程序处理。总体结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>类型(可选的范畴): 简短描述

可选的详情

可选的注解
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个完整的示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>feat(auth): increase length of new API key

the length is increased from 24 to 32 for new API keys

close #12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="各部分说明" tabindex="-1"><a class="header-anchor" href="#各部分说明" aria-hidden="true">#</a> 各部分说明</h2><h3 id="标题" tabindex="-1"><a class="header-anchor" href="#标题" aria-hidden="true">#</a> 标题</h3><p><strong>标题是每条 <code>commit</code> 日志的第一行，包含类型、范畴、描述三部分。</strong></p><h3 id="原则" tabindex="-1"><a class="header-anchor" href="#原则" aria-hidden="true">#</a> 原则</h3><p><strong>遵循少量多次的提交原则，每天下班前必须提交当天代码。</strong></p><p>如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>feat：大厅功能 //新开发的大厅功能
fix：子游戏跳转失败 //修复的子游戏跳转的bug
perfect：每日签到  //优化每日签到功能
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下为可用的 <code>commit</code> 类型及意义。</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>feat</code></td><td><code>feature</code> - 所有实现新功能、新行为的 <code>commit</code> 都属这个类型</td></tr><tr><td><code>fix</code></td><td>修正缺陷的 <code>commit</code></td></tr><tr><td><code>perfect</code></td><td>优化代码的<code>commit</code></td></tr><tr><td><code>test</code></td><td>与测试有关的改动</td></tr><tr><td><code>docs</code></td><td>对文档的改进，包括对外文档和代码注释</td></tr><tr><td><code>build</code></td><td>和构建流程、持续集成等有关的改动</td></tr><tr><td><code>chore</code></td><td>日常维护性的改动，例如 <code>linter</code> 的配置等</td></tr><tr><td><code>refactor</code></td><td>不改变行为的对代码结构的改进</td></tr><tr><td><code>style</code></td><td>对代码风格的修正（仅限缩进、空行一类的简单改动，对结构有影响的用 <code>refactor</code>）</td></tr><tr><td><code>cosm</code></td><td><code>cosmetic</code> - 不改变行为的对界面的纯视觉上的改动</td></tr></tbody></table><blockquote><p>我们的类型数量比其他类似规范的类型少，这是有意的精简。类型少既便于记忆，又能避免一些模凌两可的情况，可以降低决策成本。如果你以前使用过其他的规范，那么把这里不存在的类别归到最接近的即可。比如其他规范中的 <code>ci</code> 我们包含到 <code>build</code>里；再比如 <code>perf</code> 归到 <code>feat</code>，毕竟性能也是一种 <code>feature</code>。</p></blockquote><blockquote><p><code>docs</code> 是指针对其他项目成员的注释和文档。如果这个项目就是文档性质的，比如静态博客、SDK 文档，那么新增针对外部用户的内容就应该算是 <code>feature</code>，使用 <code>feat</code>。</p></blockquote><blockquote><p>如果一个改动会破坏向前兼容性，影响到依赖本项目的其他系统（比如旧版的 SDK，前端、客户端，或者会发生 API 调用的其他子系统）的行为，请在类型后面加上感叹号，比如 <code>feat!: ...</code> 以便识别。此外请参见下面详情小节中关于 <code>BREAKING</code>: 的描述。</p></blockquote><blockquote><p>对于大部分功能单一的 <code>repo</code>，范畴部分（示例中的 (auth)）是不需要的。对于包含多方面的功能又暂时不便拆分的 <code>repo</code>，应该把范畴标准化并记录在 <code>README</code> 或 <code>CONTRIBUTING</code> 文件中。</p></blockquote><blockquote><p>描述部分是以小写字母开头的一个短句，只有专用名词首字母大写，缩略语大写，结尾不用句号。按照 Git 的习惯，整个标题应该不超过 72 个字符，所以标题中的描述要尽量简短。如果你发现无法限制在 72 个字符内，优先考虑把这个 <code>commit</code> 拆分成多个目的更单一的 <code>commit</code>。如果逻辑上无法拆分，就把详细信息放在下面的详情里，保持标题简短。</p></blockquote><h2 id="详情" tabindex="-1"><a class="header-anchor" href="#详情" aria-hidden="true">#</a> 详情</h2><blockquote><p>详情和标题间隔一个空行。大部分 <code>commit</code> 应该保持目的单一，不需要详情部分。对于原因不是显而易见，或者原理需要解释的 <code>commit</code>，可以在这个部分说明。如果只是一个简单的句子，可以使用与标题描述部分相同的格式。如果超过一行，请按照常规的段落格式，包括句首字母大写，正确使用标点等。详情可以有多行、多段，每行不超过 72 个字符，行尾不要有空格，段落之间用空行隔开。</p></blockquote><blockquote><p>如果在当前 <code>commit</code> 中包含破坏向前兼容性的改动（见上面关于标题的描述），在详情中的第一段请以 <code>BREAKING:</code> 开头，说明这个改动的具体影响和原因。比如：</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>feat!(api): limit array length to 256 elements

BREAKING: Array length limit is added to further limit request size. A
small number of existing apps may receive HTTP 413 &quot;Payload too Large&quot;
error.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h2><blockquote><p>注解与详情以一个空行隔开，通常是一些与自动化工具集成需要的关键词和信息。比如可以关闭 GitHub issue。GitHub 支持多个作用相同的关键词，我们统一用 close，并且使用较短的形式 close 而不是 closed 或 closes。</p></blockquote><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><ol><li>编辑器设置，编译文件等应该添加到.gitignore</li><li>理论上禁用force push，应该先revert再重新提交</li><li>标题和详情中出现的描述当前 commit 的动词统一使用一般现在时。</li></ol>`,27),a=[i];function r(n,l){return d(),t("div",null,a)}const m=e(c,[["render",r],["__file","index.html.vue"]]);export{m as default};
