const l=JSON.parse(`{"key":"v-2d0a9a6d","path":"/js/","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、类型","slug":"一、类型","link":"#一、类型","children":[{"level":3,"title":"1.1 基本类型","slug":"_1-1-基本类型","link":"#_1-1-基本类型","children":[]},{"level":3,"title":"1.2  复杂类型","slug":"_1-2-复杂类型","link":"#_1-2-复杂类型","children":[]}]},{"level":2,"title":"二、引用","slug":"二、引用","link":"#二、引用","children":[{"level":3,"title":"2.1 所有的赋值都用 const，避免使用 var。","slug":"_2-1-所有的赋值都用-const-避免使用-var。","link":"#_2-1-所有的赋值都用-const-避免使用-var。","children":[]},{"level":3,"title":"2.2 对参数重新赋值，使用 let，而不是 var。","slug":"_2-2-对参数重新赋值-使用-let-而不是-var。","link":"#_2-2-对参数重新赋值-使用-let-而不是-var。","children":[]},{"level":3,"title":"2.3 let 和 const 都是块级作用域， 而 var 是函数级作用域","slug":"_2-3-let-和-const-都是块级作用域-而-var-是函数级作用域","link":"#_2-3-let-和-const-都是块级作用域-而-var-是函数级作用域","children":[]}]},{"level":2,"title":"三、对象","slug":"三、对象","link":"#三、对象","children":[{"level":3,"title":"3.1 使用字面值创建对象。","slug":"_3-1-使用字面值创建对象。","link":"#_3-1-使用字面值创建对象。","children":[]},{"level":3,"title":"3.2 使用计算属性名创建一个带有动态属性名的对象。","slug":"_3-2-使用计算属性名创建一个带有动态属性名的对象。","link":"#_3-2-使用计算属性名创建一个带有动态属性名的对象。","children":[]},{"level":3,"title":"3.3 用对象方法简写。","slug":"_3-3-用对象方法简写。","link":"#_3-3-用对象方法简写。","children":[]},{"level":3,"title":"3.4 用属性值缩写。","slug":"_3-4-用属性值缩写。","link":"#_3-4-用属性值缩写。","children":[]},{"level":3,"title":"3.5 将你的所有缩写放在对象声明的前面。","slug":"_3-5-将你的所有缩写放在对象声明的前面。","link":"#_3-5-将你的所有缩写放在对象声明的前面。","children":[]},{"level":3,"title":"3.6 只对那些无效的标示使用引号 ''。","slug":"_3-6-只对那些无效的标示使用引号-。","link":"#_3-6-只对那些无效的标示使用引号-。","children":[]},{"level":3,"title":"3.7 不要直接调用 Object.prototype上的方法，","slug":"_3-7-不要直接调用-object-prototype上的方法","link":"#_3-7-不要直接调用-object-prototype上的方法","children":[]},{"level":3,"title":"3.8 对象浅拷贝时，更推荐使用扩展运算符（即 ... 运算符），而不是 Object.assign。","slug":"_3-8-对象浅拷贝时-更推荐使用扩展运算符-即-运算符-而不是-object-assign。","link":"#_3-8-对象浅拷贝时-更推荐使用扩展运算符-即-运算符-而不是-object-assign。","children":[]}]},{"level":2,"title":"四、数组","slug":"四、数组","link":"#四、数组","children":[{"level":3,"title":"4.1 用字面量创建数组。","slug":"_4-1-用字面量创建数组。","link":"#_4-1-用字面量创建数组。","children":[]},{"level":3,"title":"4.2 用 Array#push 代替直接向数组中添加一个值。","slug":"_4-2-用-array-push-代替直接向数组中添加一个值。","link":"#_4-2-用-array-push-代替直接向数组中添加一个值。","children":[]},{"level":3,"title":"4.3 用扩展运算符做数组浅拷贝，类似上面的对象浅拷贝。","slug":"_4-3-用扩展运算符做数组浅拷贝-类似上面的对象浅拷贝。","link":"#_4-3-用扩展运算符做数组浅拷贝-类似上面的对象浅拷贝。","children":[]},{"level":3,"title":"4.4 用 ... 运算符而不是 Array.from 来将一个可迭代的对象转换成数组。","slug":"_4-4-用-运算符而不是-array-from-来将一个可迭代的对象转换成数组。","link":"#_4-4-用-运算符而不是-array-from-来将一个可迭代的对象转换成数组。","children":[]},{"level":3,"title":"4.5 用 Array.from 将一个类数组对象转成一个数组。","slug":"_4-5-用-array-from-将一个类数组对象转成一个数组。","link":"#_4-5-用-array-from-将一个类数组对象转成一个数组。","children":[]},{"level":3,"title":"4.6 用 Array.from 而不是 ... 运算符去做 map 遍历。 因为这样可以避免创建一个临时数组。","slug":"_4-6-用-array-from-而不是-运算符去做-map-遍历。-因为这样可以避免创建一个临时数组。","link":"#_4-6-用-array-from-而不是-运算符去做-map-遍历。-因为这样可以避免创建一个临时数组。","children":[]},{"level":3,"title":"4.7 在数组方法的回调函数中使用 return 语句。如果函数体由一条返回一个表达式的语句组成，并且这个表达式没有副作用， 这个时候可以忽略 return，","slug":"_4-7-在数组方法的回调函数中使用-return-语句。如果函数体由一条返回一个表达式的语句组成-并且这个表达式没有副作用-这个时候可以忽略-return","link":"#_4-7-在数组方法的回调函数中使用-return-语句。如果函数体由一条返回一个表达式的语句组成-并且这个表达式没有副作用-这个时候可以忽略-return","children":[]},{"level":3,"title":"4.8 如果一个数组有很多行，在数组的 [ 后和 ] 前断行。请看下面示例：","slug":"_4-8-如果一个数组有很多行-在数组的-后和-前断行。请看下面示例","link":"#_4-8-如果一个数组有很多行-在数组的-后和-前断行。请看下面示例","children":[]}]},{"level":2,"title":"五、解构","slug":"五、解构","link":"#五、解构","children":[{"level":3,"title":"5.1 用对象的解构赋值来获取和使用对象某个或多个属性值。","slug":"_5-1-用对象的解构赋值来获取和使用对象某个或多个属性值。","link":"#_5-1-用对象的解构赋值来获取和使用对象某个或多个属性值。","children":[]},{"level":3,"title":"5.2 用数组解构。","slug":"_5-2-用数组解构。","link":"#_5-2-用数组解构。","children":[]},{"level":3,"title":"5.3 多个返回值用对象的解构，而不是数组解构。","slug":"_5-3-多个返回值用对象的解构-而不是数组解构。","link":"#_5-3-多个返回值用对象的解构-而不是数组解构。","children":[]}]},{"level":2,"title":"六、字符串","slug":"六、字符串","link":"#六、字符串","children":[{"level":3,"title":"6.1 字符串应使用单引号 '' 。","slug":"_6-1-字符串应使用单引号-。","link":"#_6-1-字符串应使用单引号-。","children":[]},{"level":3,"title":"6.2 超过 100 个字符的字符串不应该用字符串连接成多行。","slug":"_6-2-超过-100-个字符的字符串不应该用字符串连接成多行。","link":"#_6-2-超过-100-个字符的字符串不应该用字符串连接成多行。","children":[]},{"level":3,"title":"6.3 当需要动态生成字符串时，使用模板字符串而不是字符串拼接。","slug":"_6-3-当需要动态生成字符串时-使用模板字符串而不是字符串拼接。","link":"#_6-3-当需要动态生成字符串时-使用模板字符串而不是字符串拼接。","children":[]},{"level":3,"title":"6.4 永远不要使用 eval()，该方法有太多漏洞。","slug":"_6-4-永远不要使用-eval-该方法有太多漏洞。","link":"#_6-4-永远不要使用-eval-该方法有太多漏洞。","children":[]},{"level":3,"title":"6.5 不要使用不必要的转义字符。","slug":"_6-5-不要使用不必要的转义字符。","link":"#_6-5-不要使用不必要的转义字符。","children":[]}]},{"level":2,"title":"七、函数","slug":"七、函数","link":"#七、函数","children":[{"level":3,"title":"7.1 使用命名函数表达式而不是函数声明。","slug":"_7-1-使用命名函数表达式而不是函数声明。","link":"#_7-1-使用命名函数表达式而不是函数声明。","children":[]},{"level":3,"title":"7.2 把立即执行函数包裹在圆括号里。","slug":"_7-2-把立即执行函数包裹在圆括号里。","link":"#_7-2-把立即执行函数包裹在圆括号里。","children":[]},{"level":3,"title":"7.3 不要在非函数块（if、while 等）内声明函数。","slug":"_7-3-不要在非函数块-if、while-等-内声明函数。","link":"#_7-3-不要在非函数块-if、while-等-内声明函数。","children":[]},{"level":3,"title":"7.4 注意：ECMA-262 中对块（block）的定义是： 一系列的语句。但是函数声明不是一个语句， 函数表达式是一个语句。","slug":"_7-4-注意-ecma-262-中对块-block-的定义是-一系列的语句。但是函数声明不是一个语句-函数表达式是一个语句。","link":"#_7-4-注意-ecma-262-中对块-block-的定义是-一系列的语句。但是函数声明不是一个语句-函数表达式是一个语句。","children":[]},{"level":3,"title":"7.5 不要用 arguments 命名参数。","slug":"_7-5-不要用-arguments-命名参数。","link":"#_7-5-不要用-arguments-命名参数。","children":[]},{"level":3,"title":"7.6 不要使用 arguments，用收集参数语法 ... 代替。","slug":"_7-6-不要使用-arguments-用收集参数语法-代替。","link":"#_7-6-不要使用-arguments-用收集参数语法-代替。","children":[]},{"level":3,"title":"7.7 用默认参数语法而不是在函数里对参数重新赋值。","slug":"_7-7-用默认参数语法而不是在函数里对参数重新赋值。","link":"#_7-7-用默认参数语法而不是在函数里对参数重新赋值。","children":[]},{"level":3,"title":"7.8 避免默认参数的副作用。","slug":"_7-8-避免默认参数的副作用。","link":"#_7-8-避免默认参数的副作用。","children":[]},{"level":3,"title":"7.9 把默认参数赋值放在最后。","slug":"_7-9-把默认参数赋值放在最后。","link":"#_7-9-把默认参数赋值放在最后。","children":[]},{"level":3,"title":"7.10 不要用函数构造器创建函数。","slug":"_7-10-不要用函数构造器创建函数。","link":"#_7-10-不要用函数构造器创建函数。","children":[]},{"level":3,"title":"7.11 函数定义部分要有空格。","slug":"_7-11-函数定义部分要有空格。","link":"#_7-11-函数定义部分要有空格。","children":[]},{"level":3,"title":"7.12 不要修改参数.","slug":"_7-12-不要修改参数","link":"#_7-12-不要修改参数","children":[]},{"level":3,"title":"7.13 不要对参数重新赋值。","slug":"_7-13-不要对参数重新赋值。","link":"#_7-13-不要对参数重新赋值。","children":[]},{"level":3,"title":"7.14 使用拓展运算符调用多参数的函数。","slug":"_7-14-使用拓展运算符调用多参数的函数。","link":"#_7-14-使用拓展运算符调用多参数的函数。","children":[]},{"level":3,"title":"7.15 调用或者编写一个包含多个参数的函数的缩进，应该像这个指南里的其他多行代码写法一样——即每行只包含一个参数，每行逗号结尾。","slug":"_7-15-调用或者编写一个包含多个参数的函数的缩进-应该像这个指南里的其他多行代码写法一样——即每行只包含一个参数-每行逗号结尾。","link":"#_7-15-调用或者编写一个包含多个参数的函数的缩进-应该像这个指南里的其他多行代码写法一样——即每行只包含一个参数-每行逗号结尾。","children":[]}]},{"level":2,"title":"八、箭头函数","slug":"八、箭头函数","link":"#八、箭头函数","children":[{"level":3,"title":"8.1 当你一定要用函数表达式（在回调函数里）的时候，使用箭头函数。","slug":"_8-1-当你一定要用函数表达式-在回调函数里-的时候-使用箭头函数。","link":"#_8-1-当你一定要用函数表达式-在回调函数里-的时候-使用箭头函数。","children":[]},{"level":3,"title":"8.2 如果函数体由一个没有副作用的 表达式 语句组成，删除大括号和 return。否则，使用大括号和  return 语句。","slug":"_8-2-如果函数体由一个没有副作用的-表达式-语句组成-删除大括号和-return。否则-使用大括号和-return-语句。","link":"#_8-2-如果函数体由一个没有副作用的-表达式-语句组成-删除大括号和-return。否则-使用大括号和-return-语句。","children":[]},{"level":3,"title":"8.3 如果表达式涉及多行，把他包裹在圆括号里以提高可读性。","slug":"_8-3-如果表达式涉及多行-把他包裹在圆括号里以提高可读性。","link":"#_8-3-如果表达式涉及多行-把他包裹在圆括号里以提高可读性。","children":[]},{"level":3,"title":"8.4 在箭头函数参数两头，总是使用小括号包裹住参数，这样做使代码更清晰且一致.","slug":"_8-4-在箭头函数参数两头-总是使用小括号包裹住参数-这样做使代码更清晰且一致","link":"#_8-4-在箭头函数参数两头-总是使用小括号包裹住参数-这样做使代码更清晰且一致","children":[]},{"level":3,"title":"8.5 避免箭头函数（=>）和比较操作符（<=, >=）混淆.","slug":"_8-5-避免箭头函数-和比较操作符-混淆","link":"#_8-5-避免箭头函数-和比较操作符-混淆","children":[]},{"level":3,"title":"8.6 使箭头函数体有一个清晰的返回。","slug":"_8-6-使箭头函数体有一个清晰的返回。","link":"#_8-6-使箭头函数体有一个清晰的返回。","children":[]}]},{"level":2,"title":"九、类与构造函数","slug":"九、类与构造函数","link":"#九、类与构造函数","children":[{"level":3,"title":"9.1 使用 class 语法。避免直接操作 prototype。","slug":"_9-1-使用-class-语法。避免直接操作-prototype。","link":"#_9-1-使用-class-语法。避免直接操作-prototype。","children":[]},{"level":3,"title":"9.2 用 extends 实现继承。","slug":"_9-2-用-extends-实现继承。","link":"#_9-2-用-extends-实现继承。","children":[]},{"level":3,"title":"9.3 方法可以返回 this 来实现链式调用。","slug":"_9-3-方法可以返回-this-来实现链式调用。","link":"#_9-3-方法可以返回-this-来实现链式调用。","children":[]},{"level":3,"title":"9.4 自己写 toString() 方法是可以的，但需要保证它可以正常工作且没有副作用。","slug":"_9-4-自己写-tostring-方法是可以的-但需要保证它可以正常工作且没有副作用。","link":"#_9-4-自己写-tostring-方法是可以的-但需要保证它可以正常工作且没有副作用。","children":[]},{"level":3,"title":"9.5 如果没有特别定义，类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。","slug":"_9-5-如果没有特别定义-类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。","link":"#_9-5-如果没有特别定义-类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。","children":[]},{"level":3,"title":"9.6 避免重复定义类成员。","slug":"_9-6-避免重复定义类成员。","link":"#_9-6-避免重复定义类成员。","children":[]},{"level":3,"title":"9.7 除非外部库或框架需要使用特定的非静态方法，否则类方法应该使用 this 或被写成静态方法。","slug":"_9-7-除非外部库或框架需要使用特定的非静态方法-否则类方法应该使用-this-或被写成静态方法。","link":"#_9-7-除非外部库或框架需要使用特定的非静态方法-否则类方法应该使用-this-或被写成静态方法。","children":[]}]},{"level":2,"title":"十、模块","slug":"十、模块","link":"#十、模块","children":[{"level":3,"title":"10.1 使用（import/export）模块而不是非标准的模块系统。","slug":"_10-1-使用-import-export-模块而不是非标准的模块系统。","link":"#_10-1-使用-import-export-模块而不是非标准的模块系统。","children":[]},{"level":3,"title":"10.2 不要用 import 通配符， 即 * 这种方式。","slug":"_10-2-不要用-import-通配符-即-这种方式。","link":"#_10-2-不要用-import-通配符-即-这种方式。","children":[]},{"level":3,"title":"10.3 不要直接从 import 中直接 export。","slug":"_10-3-不要直接从-import-中直接-export。","link":"#_10-3-不要直接从-import-中直接-export。","children":[]},{"level":3,"title":"10.4 一个路径只 import 一次。","slug":"_10-4-一个路径只-import-一次。","link":"#_10-4-一个路径只-import-一次。","children":[]},{"level":3,"title":"10.5 不要导出可变的东西。","slug":"_10-5-不要导出可变的东西。","link":"#_10-5-不要导出可变的东西。","children":[]},{"level":3,"title":"10.6 在一个单一导出模块里，用 export default 更好。","slug":"_10-6-在一个单一导出模块里-用-export-default-更好。","link":"#_10-6-在一个单一导出模块里-用-export-default-更好。","children":[]},{"level":3,"title":"10.7 把 import 放在其他所有语句之前。","slug":"_10-7-把-import-放在其他所有语句之前。","link":"#_10-7-把-import-放在其他所有语句之前。","children":[]},{"level":3,"title":"10.8 多行 import 应该缩进，就像多行数组和对象字面量一样。","slug":"_10-8-多行-import-应该缩进-就像多行数组和对象字面量一样。","link":"#_10-8-多行-import-应该缩进-就像多行数组和对象字面量一样。","children":[]},{"level":3,"title":"10.9 在 import 语句里不允许 Webpack loader 语法。","slug":"_10-9-在-import-语句里不允许-webpack-loader-语法。","link":"#_10-9-在-import-语句里不允许-webpack-loader-语法。","children":[]},{"level":3,"title":"10.10 import JavaScript文件不用包含扩展名","slug":"_10-10-import-javascript文件不用包含扩展名","link":"#_10-10-import-javascript文件不用包含扩展名","children":[]}]},{"level":2,"title":"十一、迭代器与生成器","slug":"十一、迭代器与生成器","link":"#十一、迭代器与生成器","children":[{"level":3,"title":"11.1 不要用迭代器。","slug":"_11-1-不要用迭代器。","link":"#_11-1-不要用迭代器。","children":[]},{"level":3,"title":"11.2 现在暂时不要使用生成器。","slug":"_11-2-现在暂时不要使用生成器。","link":"#_11-2-现在暂时不要使用生成器。","children":[]},{"level":3,"title":"11.3 如果你一定要用生成器，或者你忽略 我们的建议，请确保它们的函数标志空格是得当的。","slug":"_11-3-如果你一定要用生成器-或者你忽略-我们的建议-请确保它们的函数标志空格是得当的。","link":"#_11-3-如果你一定要用生成器-或者你忽略-我们的建议-请确保它们的函数标志空格是得当的。","children":[]}]},{"level":2,"title":"十二、属性","slug":"十二、属性","link":"#十二、属性","children":[{"level":3,"title":"12.1 访问属性时使用点符号。","slug":"_12-1-访问属性时使用点符号。","link":"#_12-1-访问属性时使用点符号。","children":[]},{"level":3,"title":"12.2 当使用变量获取属性时用方括号 []。","slug":"_12-2-当使用变量获取属性时用方括号-。","link":"#_12-2-当使用变量获取属性时用方括号-。","children":[]},{"level":3,"title":"12.3 做幂运算时用幂操作符 ** 。","slug":"_12-3-做幂运算时用幂操作符-。","link":"#_12-3-做幂运算时用幂操作符-。","children":[]}]},{"level":2,"title":"十三、变量","slug":"十三、变量","link":"#十三、变量","children":[{"level":3,"title":"13.1  使用 const 或 let 声明变量。不这样做会导致全局变量。我们想要避免污染全局命名空间。地球超人也这样警告我们（译者注：可能是一个冷笑话）。","slug":"_13-1-使用-const-或-let-声明变量。不这样做会导致全局变量。我们想要避免污染全局命名空间。地球超人也这样警告我们-译者注-可能是一个冷笑话-。","link":"#_13-1-使用-const-或-let-声明变量。不这样做会导致全局变量。我们想要避免污染全局命名空间。地球超人也这样警告我们-译者注-可能是一个冷笑话-。","children":[]},{"level":3,"title":"13.2 为每个变量声明都用一个 const 或 let 。","slug":"_13-2-为每个变量声明都用一个-const-或-let-。","link":"#_13-2-为每个变量声明都用一个-const-或-let-。","children":[]},{"level":3,"title":"13.3 把const  和 let 分别放一起。","slug":"_13-3-把const-和-let-分别放一起。","link":"#_13-3-把const-和-let-分别放一起。","children":[]},{"level":3,"title":"13.4 在你需要的地方声明变量，但是要放在合理的位置。","slug":"_13-4-在你需要的地方声明变量-但是要放在合理的位置。","link":"#_13-4-在你需要的地方声明变量-但是要放在合理的位置。","children":[]},{"level":3,"title":"13.5 不要使用链式声明变量。","slug":"_13-5-不要使用链式声明变量。","link":"#_13-5-不要使用链式声明变量。","children":[]},{"level":3,"title":"13.6 不要使用一元自增自减运算符（++， --）.","slug":"_13-6-不要使用一元自增自减运算符","link":"#_13-6-不要使用一元自增自减运算符","children":[]},{"level":3,"title":"13.7 在赋值的时候避免在 = 前/后换行。","slug":"_13-7-在赋值的时候避免在-前-后换行。","link":"#_13-7-在赋值的时候避免在-前-后换行。","children":[]},{"level":3,"title":"13.8 不允许有未使用的变量。","slug":"_13-8-不允许有未使用的变量。","link":"#_13-8-不允许有未使用的变量。","children":[]}]},{"level":2,"title":"十四、提升","slug":"十四、提升","link":"#十四、提升","children":[{"level":3,"title":"14.1 var 声明会被提前到离他最近的作用域的最前面，但是它的赋值语句并没有提前。const 和 let 被赋予了新的概念 暂时性死区 (TDZ)。 重要的是要知道为什么 typeof 不再安全。","slug":"_14-1-var-声明会被提前到离他最近的作用域的最前面-但是它的赋值语句并没有提前。const-和-let-被赋予了新的概念-暂时性死区-tdz-。-重要的是要知道为什么-typeof-不再安全。","link":"#_14-1-var-声明会被提前到离他最近的作用域的最前面-但是它的赋值语句并没有提前。const-和-let-被赋予了新的概念-暂时性死区-tdz-。-重要的是要知道为什么-typeof-不再安全。","children":[]},{"level":3,"title":"14.2 匿名函数表达式和 var 情况相同。","slug":"_14-2-匿名函数表达式和-var-情况相同。","link":"#_14-2-匿名函数表达式和-var-情况相同。","children":[]},{"level":3,"title":"14.3 已命名函数表达式提升他的变量名，不是函数名或函数体。","slug":"_14-3-已命名函数表达式提升他的变量名-不是函数名或函数体。","link":"#_14-3-已命名函数表达式提升他的变量名-不是函数名或函数体。","children":[]},{"level":3,"title":"14.4 函数声明则提升了函数名和函数体。","slug":"_14-4-函数声明则提升了函数名和函数体。","link":"#_14-4-函数声明则提升了函数名和函数体。","children":[]}]},{"level":2,"title":"十五、比较运算符与相等","slug":"十五、比较运算符与相等","link":"#十五、比较运算符与相等","children":[{"level":3,"title":"15.1 用 === 和 !== 而不是 == 和 !=.","slug":"_15-1-用-和-而不是-和","link":"#_15-1-用-和-而不是-和","children":[]},{"level":3,"title":"15.2 条件语句如 if 语句使用强制 ToBoolean 抽象方法来计算它们的表达式，并且始终遵循以下简单规则：","slug":"_15-2-条件语句如-if-语句使用强制-toboolean-抽象方法来计算它们的表达式-并且始终遵循以下简单规则","link":"#_15-2-条件语句如-if-语句使用强制-toboolean-抽象方法来计算它们的表达式-并且始终遵循以下简单规则","children":[]},{"level":3,"title":"15.3 布尔值要用缩写，而字符串和数字要明确使用比较操作符。","slug":"_15-3-布尔值要用缩写-而字符串和数字要明确使用比较操作符。","link":"#_15-3-布尔值要用缩写-而字符串和数字要明确使用比较操作符。","children":[]},{"level":3,"title":"15.4 更多信息请见 Angus Croll 的 Truth Equality and JavaScript。","slug":"_15-4-更多信息请见-angus-croll-的-truth-equality-and-javascript。","link":"#_15-4-更多信息请见-angus-croll-的-truth-equality-and-javascript。","children":[]},{"level":3,"title":"15.5 在 case 和 default 分句里用大括号创建一块包含词法声明的区域（例如：let、const、function 和 class）。","slug":"_15-5-在-case-和-default-分句里用大括号创建一块包含词法声明的区域-例如-let、const、function-和-class-。","link":"#_15-5-在-case-和-default-分句里用大括号创建一块包含词法声明的区域-例如-let、const、function-和-class-。","children":[]},{"level":3,"title":"15.6 三元表达式不应该嵌套，通常是单行表达式。","slug":"_15-6-三元表达式不应该嵌套-通常是单行表达式。","link":"#_15-6-三元表达式不应该嵌套-通常是单行表达式。","children":[]},{"level":3,"title":"15.7 避免不必要的三元表达式。","slug":"_15-7-避免不必要的三元表达式。","link":"#_15-7-避免不必要的三元表达式。","children":[]},{"level":3,"title":"15.8 用圆括号来组合多种操作符。","slug":"_15-8-用圆括号来组合多种操作符。","link":"#_15-8-用圆括号来组合多种操作符。","children":[]}]},{"level":2,"title":"十六、块","slug":"十六、块","link":"#十六、块","children":[{"level":3,"title":"16.1 用大括号包裹多行代码块。","slug":"_16-1-用大括号包裹多行代码块。","link":"#_16-1-用大括号包裹多行代码块。","children":[]},{"level":3,"title":"16.2 if 表达式的 else和 if 的右大括号在一行。","slug":"_16-2-if-表达式的-else和-if-的右大括号在一行。","link":"#_16-2-if-表达式的-else和-if-的右大括号在一行。","children":[]},{"level":3,"title":"16.3 如果 if 语句中总是需要用 return 返回，那后续的 else 就不需要写了。 if 块中包含 return， 它后面的 else if 块中也包含了 return， 这个时候就可以把 return 分到多个 if 语句块中。","slug":"_16-3-如果-if-语句中总是需要用-return-返回-那后续的-else-就不需要写了。-if-块中包含-return-它后面的-else-if-块中也包含了-return-这个时候就可以把-return-分到多个-if-语句块中。","link":"#_16-3-如果-if-语句中总是需要用-return-返回-那后续的-else-就不需要写了。-if-块中包含-return-它后面的-else-if-块中也包含了-return-这个时候就可以把-return-分到多个-if-语句块中。","children":[]}]},{"level":2,"title":"十七、控制语句","slug":"十七、控制语句","link":"#十七、控制语句","children":[{"level":3,"title":"17.1 当你的控制语句（if, while 等）太长或者超过最大长度限制的时候，把每一个（组）判断条件放在单独一行里。逻辑操作符放在行首。","slug":"_17-1-当你的控制语句-if-while-等-太长或者超过最大长度限制的时候-把每一个-组-判断条件放在单独一行里。逻辑操作符放在行首。","link":"#_17-1-当你的控制语句-if-while-等-太长或者超过最大长度限制的时候-把每一个-组-判断条件放在单独一行里。逻辑操作符放在行首。","children":[]},{"level":3,"title":"17.2 不要用选择操作符代替控制语句。","slug":"_17-2-不要用选择操作符代替控制语句。","link":"#_17-2-不要用选择操作符代替控制语句。","children":[]}]},{"level":2,"title":"十八、注释","slug":"十八、注释","link":"#十八、注释","children":[{"level":3,"title":"18.1 多行注释用 /** ... */。","slug":"_18-1-多行注释用-。","link":"#_18-1-多行注释用-。","children":[]},{"level":3,"title":"18.2 单行注释用 //，将单行注释放在被注释区域上面。如果注释不是在第一行，那么注释前面就空一行。","slug":"_18-2-单行注释用-将单行注释放在被注释区域上面。如果注释不是在第一行-那么注释前面就空一行。","link":"#_18-2-单行注释用-将单行注释放在被注释区域上面。如果注释不是在第一行-那么注释前面就空一行。","children":[]},{"level":3,"title":"18.3 所有注释开头空一格，方便阅读。","slug":"_18-3-所有注释开头空一格-方便阅读。","link":"#_18-3-所有注释开头空一格-方便阅读。","children":[]},{"level":3,"title":"18.4 在你的注释前使用 FIXME 或 TODO 前缀，这有助于其他开发人员快速理解你指出的需要修复的问题， 或者您建议需要实现的问题的解决方案。 这些不同于常规注释，它们是有明确含义的。FIXME：需要修复这个问题或TODO：需要实现的功能。","slug":"_18-4-在你的注释前使用-fixme-或-todo-前缀-这有助于其他开发人员快速理解你指出的需要修复的问题-或者您建议需要实现的问题的解决方案。-这些不同于常规注释-它们是有明确含义的。fixme-需要修复这个问题或todo-需要实现的功能。","link":"#_18-4-在你的注释前使用-fixme-或-todo-前缀-这有助于其他开发人员快速理解你指出的需要修复的问题-或者您建议需要实现的问题的解决方案。-这些不同于常规注释-它们是有明确含义的。fixme-需要修复这个问题或todo-需要实现的功能。","children":[]},{"level":3,"title":"18.5 用 // FIXME: 给问题做注释。","slug":"_18-5-用-fixme-给问题做注释。","link":"#_18-5-用-fixme-给问题做注释。","children":[]},{"level":3,"title":"18.6 用 // TODO: 去注释问题的解决方案。","slug":"_18-6-用-todo-去注释问题的解决方案。","link":"#_18-6-用-todo-去注释问题的解决方案。","children":[]}]},{"level":2,"title":"十九、空格","slug":"十九、空格","link":"#十九、空格","children":[{"level":3,"title":"19.1 一个缩进使用两个空格。","slug":"_19-1-一个缩进使用两个空格。","link":"#_19-1-一个缩进使用两个空格。","children":[]},{"level":3,"title":"19.2 在大括号前空一格。","slug":"_19-2-在大括号前空一格。","link":"#_19-2-在大括号前空一格。","children":[]},{"level":3,"title":"19.3 在控制语句（if, while 等）的圆括号前空一格。","slug":"_19-3-在控制语句-if-while-等-的圆括号前空一格。","link":"#_19-3-在控制语句-if-while-等-的圆括号前空一格。","children":[]},{"level":3,"title":"19.4 用空格来隔开运算符。","slug":"_19-4-用空格来隔开运算符。","link":"#_19-4-用空格来隔开运算符。","children":[]},{"level":3,"title":"19.5 文件结尾空一行。","slug":"_19-5-文件结尾空一行。","link":"#_19-5-文件结尾空一行。","children":[]},{"level":3,"title":"19.6 当出现长的方法链式调用时（>2个）用缩进。用点开头强调该行是一个方法调用，而不是一个新的语句。","slug":"_19-6-当出现长的方法链式调用时-2个-用缩进。用点开头强调该行是一个方法调用-而不是一个新的语句。","link":"#_19-6-当出现长的方法链式调用时-2个-用缩进。用点开头强调该行是一个方法调用-而不是一个新的语句。","children":[]},{"level":3,"title":"19.7 在一个代码块后下一条语句前空一行。","slug":"_19-7-在一个代码块后下一条语句前空一行。","link":"#_19-7-在一个代码块后下一条语句前空一行。","children":[]},{"level":3,"title":"19.8 不要用空白行填充块。","slug":"_19-8-不要用空白行填充块。","link":"#_19-8-不要用空白行填充块。","children":[]},{"level":3,"title":"19.9 不要在代码之间使用多个空白行填充。","slug":"_19-9-不要在代码之间使用多个空白行填充。","link":"#_19-9-不要在代码之间使用多个空白行填充。","children":[]},{"level":3,"title":"19.10 圆括号里不要加空格。","slug":"_19-10-圆括号里不要加空格。","link":"#_19-10-圆括号里不要加空格。","children":[]},{"level":3,"title":"19.11 方括号里不要加空格。","slug":"_19-11-方括号里不要加空格。","link":"#_19-11-方括号里不要加空格。","children":[]},{"level":3,"title":"19.12 花括号里加空格 。","slug":"_19-12-花括号里加空格-。","link":"#_19-12-花括号里加空格-。","children":[]},{"level":3,"title":"19.13 避免一行代码超过100个字符（包含空格）。","slug":"_19-13-避免一行代码超过100个字符-包含空格-。","link":"#_19-13-避免一行代码超过100个字符-包含空格-。","children":[]},{"level":3,"title":"19.14 作为语句的花括号内也要加空格 —— { 后和 } 前都需要空格。","slug":"_19-14-作为语句的花括号内也要加空格-——-后和-前都需要空格。","link":"#_19-14-作为语句的花括号内也要加空格-——-后和-前都需要空格。","children":[]},{"level":3,"title":"19.15 , 前不要空格， , 后需要空格。","slug":"_19-15-前不要空格-后需要空格。","link":"#_19-15-前不要空格-后需要空格。","children":[]},{"level":3,"title":"19.16 花括号跟属性间要有空格，中括号跟属性间没有空格。","slug":"_19-16-花括号跟属性间要有空格-中括号跟属性间没有空格。","link":"#_19-16-花括号跟属性间要有空格-中括号跟属性间没有空格。","children":[]},{"level":3,"title":"19.17 调用函数时，函数名和小括号之间不要空格。","slug":"_19-17-调用函数时-函数名和小括号之间不要空格。","link":"#_19-17-调用函数时-函数名和小括号之间不要空格。","children":[]},{"level":3,"title":"19.18 在对象的字面量属性中， key  和 value 之间要有空格。","slug":"_19-18-在对象的字面量属性中-key-和-value-之间要有空格。","link":"#_19-18-在对象的字面量属性中-key-和-value-之间要有空格。","children":[]},{"level":3,"title":"19.19 行末不要空格。","slug":"_19-19-行末不要空格。","link":"#_19-19-行末不要空格。","children":[]},{"level":3,"title":"19.20 避免出现多个空行。","slug":"_19-20-避免出现多个空行。","link":"#_19-20-避免出现多个空行。","children":[]}]},{"level":2,"title":"二十、逗号","slug":"二十、逗号","link":"#二十、逗号","children":[{"level":3,"title":"20.1 不要前置逗号。","slug":"_20-1-不要前置逗号。","link":"#_20-1-不要前置逗号。","children":[]},{"level":3,"title":"20.2 额外结尾逗号: 要","slug":"_20-2-额外结尾逗号-要","link":"#_20-2-额外结尾逗号-要","children":[]}]},{"level":2,"title":"二十一、分号","slug":"二十一、分号","link":"#二十一、分号","children":[{"level":3,"title":"21.1 要分号！","slug":"_21-1-要分号","link":"#_21-1-要分号","children":[]}]},{"level":2,"title":"二十二、类型转换与强制转换","slug":"二十二、类型转换与强制转换","link":"#二十二、类型转换与强制转换","children":[{"level":3,"title":"22.1 在语句开始执行强制类型转换。","slug":"_22-1-在语句开始执行强制类型转换。","link":"#_22-1-在语句开始执行强制类型转换。","children":[]},{"level":3,"title":"22.2  字符串","slug":"_22-2-字符串","link":"#_22-2-字符串","children":[]},{"level":3,"title":"22.3 数字","slug":"_22-3-数字","link":"#_22-3-数字","children":[]},{"level":3,"title":"22.4 请在注释中解释为什么要用移位运算和你在做什么。无论你做什么狂野的事，比如由于 parseInt 是你的性能瓶颈导致你一定要用移位运算。说明这个是因为 性能原因。","slug":"_22-4-请在注释中解释为什么要用移位运算和你在做什么。无论你做什么狂野的事-比如由于-parseint-是你的性能瓶颈导致你一定要用移位运算。说明这个是因为-性能原因。","link":"#_22-4-请在注释中解释为什么要用移位运算和你在做什么。无论你做什么狂野的事-比如由于-parseint-是你的性能瓶颈导致你一定要用移位运算。说明这个是因为-性能原因。","children":[]},{"level":3,"title":"22.5 注意: 用移位运算要小心。","slug":"_22-5-注意-用移位运算要小心。","link":"#_22-5-注意-用移位运算要小心。","children":[]},{"level":3,"title":"22.6 布尔","slug":"_22-6-布尔","link":"#_22-6-布尔","children":[]}]},{"level":2,"title":"二十三、命名规范","slug":"二十三、命名规范","link":"#二十三、命名规范","children":[{"level":3,"title":"23.1 避免用一个字母命名，让你的命名有意义。","slug":"_23-1-避免用一个字母命名-让你的命名有意义。","link":"#_23-1-避免用一个字母命名-让你的命名有意义。","children":[]},{"level":3,"title":"23.2 用小驼峰命名法来命名你的对象、函数、实例。","slug":"_23-2-用小驼峰命名法来命名你的对象、函数、实例。","link":"#_23-2-用小驼峰命名法来命名你的对象、函数、实例。","children":[]},{"level":3,"title":"23.3 用大驼峰命名法来命名类。","slug":"_23-3-用大驼峰命名法来命名类。","link":"#_23-3-用大驼峰命名法来命名类。","children":[]},{"level":3,"title":"23.4 不要用前置或后置下划线。","slug":"_23-4-不要用前置或后置下划线。","link":"#_23-4-不要用前置或后置下划线。","children":[]},{"level":3,"title":"23.5 不要保存引用 this，用箭头函数或 函数绑定——Function#bind。","slug":"_23-5-不要保存引用-this-用箭头函数或-函数绑定——function-bind。","link":"#_23-5-不要保存引用-this-用箭头函数或-函数绑定——function-bind。","children":[]},{"level":3,"title":"23.6 export default 导出模块A，则这个文件名也叫 A.*， import 时候的参数也叫 A。 大小写完全一致。","slug":"_23-6-export-default-导出模块a-则这个文件名也叫-a-import-时候的参数也叫-a。-大小写完全一致。","link":"#_23-6-export-default-导出模块a-则这个文件名也叫-a-import-时候的参数也叫-a。-大小写完全一致。","children":[]},{"level":3,"title":"23.7 当你 export-default 一个函数时，函数名用小驼峰，文件名需要和函数名一致。","slug":"_23-7-当你-export-default-一个函数时-函数名用小驼峰-文件名需要和函数名一致。","link":"#_23-7-当你-export-default-一个函数时-函数名用小驼峰-文件名需要和函数名一致。","children":[]},{"level":3,"title":"23.8 当你 export 一个结构体/类/单例/函数库/对象 时用大驼峰。","slug":"_23-8-当你-export-一个结构体-类-单例-函数库-对象-时用大驼峰。","link":"#_23-8-当你-export-一个结构体-类-单例-函数库-对象-时用大驼峰。","children":[]},{"level":3,"title":"23.9 简称和缩写应该全部大写或全部小写。","slug":"_23-9-简称和缩写应该全部大写或全部小写。","link":"#_23-9-简称和缩写应该全部大写或全部小写。","children":[]},{"level":3,"title":"23.10 你可以用全大写字母设置静态变量，他需要满足三个条件。","slug":"_23-10-你可以用全大写字母设置静态变量-他需要满足三个条件。","link":"#_23-10-你可以用全大写字母设置静态变量-他需要满足三个条件。","children":[]}]},{"level":2,"title":"二十四、Get-Set 访问器","slug":"二十四、get-set-访问器","link":"#二十四、get-set-访问器","children":[{"level":3,"title":"24.1 不需要使用属性的访问器函数。","slug":"_24-1-不需要使用属性的访问器函数。","link":"#_24-1-不需要使用属性的访问器函数。","children":[]},{"level":3,"title":"24.2 不要使用 JavaScript 的 getters/setters，因为他们会产生副作用，并且难以测试、维护和理解。相反的，你可以用 getVal() 和 setVal('hello') 去创造你自己的访问器函数。","slug":"_24-2-不要使用-javascript-的-getters-setters-因为他们会产生副作用-并且难以测试、维护和理解。相反的-你可以用-getval-和-setval-hello-去创造你自己的访问器函数。","link":"#_24-2-不要使用-javascript-的-getters-setters-因为他们会产生副作用-并且难以测试、维护和理解。相反的-你可以用-getval-和-setval-hello-去创造你自己的访问器函数。","children":[]},{"level":3,"title":"24.3 如果属性/方法是 boolean， 用 isVal() 或 hasVal()。","slug":"_24-3-如果属性-方法是-boolean-用-isval-或-hasval-。","link":"#_24-3-如果属性-方法是-boolean-用-isval-或-hasval-。","children":[]},{"level":3,"title":"24.4 用 get()  和 set() 函数是可以的，但是要一起用。","slug":"_24-4-用-get-和-set-函数是可以的-但是要一起用。","link":"#_24-4-用-get-和-set-函数是可以的-但是要一起用。","children":[]}]},{"level":2,"title":"二十五、事件","slug":"二十五、事件","link":"#二十五、事件","children":[{"level":3,"title":"25.1 当传递数据载荷给事件时（不论是 DOM 还是像 Backbone 这样有很多属性的事件）。","slug":"_25-1-当传递数据载荷给事件时-不论是-dom-还是像-backbone-这样有很多属性的事件-。","link":"#_25-1-当传递数据载荷给事件时-不论是-dom-还是像-backbone-这样有很多属性的事件-。","children":[]}]},{"level":2,"title":"二十六、jQuery","slug":"二十六、jquery","link":"#二十六、jquery","children":[{"level":3,"title":"26.1  jQuery 对象用$变量表示。","slug":"_26-1-jquery-对象用-变量表示。","link":"#_26-1-jquery-对象用-变量表示。","children":[]},{"level":3,"title":"26.2 缓存 jQuery 查找。","slug":"_26-2-缓存-jquery-查找。","link":"#_26-2-缓存-jquery-查找。","children":[]},{"level":3,"title":"26.3 DOM 查找用层叠式$('.sidebar ul') 或 父节点 > 子节点 $('.sidebar > ul'). jsPerf","slug":"_26-3-dom-查找用层叠式-sidebar-ul-或-父节点-子节点-sidebar-ul-jsperf","link":"#_26-3-dom-查找用层叠式-sidebar-ul-或-父节点-子节点-sidebar-ul-jsperf","children":[]},{"level":3,"title":"26.4 用 jQuery 对象查询作用域的 find 方法查询。","slug":"_26-4-用-jquery-对象查询作用域的-find-方法查询。","link":"#_26-4-用-jquery-对象查询作用域的-find-方法查询。","children":[]}]},{"level":2,"title":"附录一、ECMAScript 5 兼容性","slug":"附录一、ecmascript-5-兼容性","link":"#附录一、ecmascript-5-兼容性","children":[]},{"level":2,"title":"附录二、ECMAScript 6+ (ES 2015+) 风格","slug":"附录二、ecmascript-6-es-2015-风格","link":"#附录二、ecmascript-6-es-2015-风格","children":[{"level":3,"title":"28.2 不要用 TC39 proposals， TC39 还没有到 stage 3。","slug":"_28-2-不要用-tc39-proposals-tc39-还没有到-stage-3。","link":"#_28-2-不要用-tc39-proposals-tc39-还没有到-stage-3。","children":[]}]},{"level":2,"title":"附录三、标准库","slug":"附录三、标准库","link":"#附录三、标准库","children":[{"level":3,"title":"29.1 用 Number.isNaN 代替全局的 isNaN。","slug":"_29-1-用-number-isnan-代替全局的-isnan。","link":"#_29-1-用-number-isnan-代替全局的-isnan。","children":[]},{"level":3,"title":"29.2 用 Number.isFinite 代替 isFinite.","slug":"_29-2-用-number-isfinite-代替-isfinite","link":"#_29-2-用-number-isfinite-代替-isfinite","children":[]}]},{"level":2,"title":"附录四、测试","slug":"附录四、测试","link":"#附录四、测试","children":[{"level":3,"title":"30.1 Yup.","slug":"_30-1-yup","link":"#_30-1-yup","children":[]},{"level":3,"title":"30.2 No, but seriously:","slug":"_30-2-no-but-seriously","link":"#_30-2-no-but-seriously","children":[]}]},{"level":2,"title":"附录五、性能","slug":"附录五、性能","link":"#附录五、性能","children":[]},{"level":2,"title":"附录六、资源","slug":"附录六、资源","link":"#附录六、资源","children":[{"level":3,"title":"Learning ES6","slug":"learning-es6","link":"#learning-es6","children":[]},{"level":3,"title":"Read This","slug":"read-this","link":"#read-this","children":[]},{"level":3,"title":"Tools","slug":"tools","link":"#tools","children":[]},{"level":3,"title":"Other Style Guides","slug":"other-style-guides","link":"#other-style-guides","children":[]},{"level":3,"title":"Other Styles","slug":"other-styles","link":"#other-styles","children":[]},{"level":3,"title":"Further Reading","slug":"further-reading","link":"#further-reading","children":[]},{"level":3,"title":"Books","slug":"books","link":"#books","children":[]},{"level":3,"title":"Blogs","slug":"blogs","link":"#blogs","children":[]},{"level":3,"title":"Podcasts","slug":"podcasts","link":"#podcasts","children":[]}]}],"git":{"createdTime":1684856119000,"updatedTime":1684856119000,"contributors":[{"name":"云迁-王政和","email":"ccoderux@163.com","commits":1}]},"readingTime":{"minutes":54.01,"words":16202},"filePathRelative":"js/README.md","localizedDate":"2023年5月23日"}`);export{l as data};
